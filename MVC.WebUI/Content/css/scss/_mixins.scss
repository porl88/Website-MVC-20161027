/* converts px to rem - need to define a $base-font-size-px variable and use it to set the html font-size value */
/* http://drublic.de/blog/rem-fallback-sass-less/ */

$media-phone: "screen and (max-width: 450px)";
$media-tablet: "screen and (max-width: 768px)";
$media-desktop: "screen and (max-width: 1280px)";

/*
e.g.

@media #{$media-tablet} {
    #content {
        font-size: 12px;
    }
}
*/


/* 

$media-phone: 450px;
$media-tablet: 768px;

@mixin responsive($width) {
    @if $width == phone {
        @media only screen and (max-width: $media-phone) { @content; }
    }
    @else if $width == tablet {
        @media only screen and (max-width: $media-tablet) { @content; }
    }
}


e.g.

    #content {
        font-size: 12px;
        @include responsive(phone) {
            font-size: 10px;
        }
    }

outputs:

    #content {
        font-size: 12px;
    }

     @media only screen and (max-width: $media-phone) {
        font-size: 10px;
    }
*/

@mixin retinise($file, $type, $width, $height) {
    background-image: url("../img/" + $file + "." + $type);

    @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 1.5dppx) {
        & {
            background-image: url("../img/" + $file + "-2x." + $type);
        }
    }
}

 /* assumes a default size of 16px - needs to be set in HTML tag when in development */
@mixin px-to-rem($property, $px) {
  #{$property}: #{$px}px;
  #{$property}: #{$px / 16}rem;
}

@mixin border-radius($px) {
  @include pxtorem(-webkit-border-radius, $px);
  @include pxtorem(-moz-border-radius, $px);
  @include pxtorem(border-radius, $px);
}

@mixin box-sizing($model: border-box) {
    -moz-box-sizing: $model;
    -webkit-box-sizing: $model;
    box-sizing: $model;
}

@mixin shadow($x, $y, $blur, $colour) {
    -webkit-box-shadow: $x $y $blur $colour;
    -moz-box-shadow: $x $y $blur $colour;
    box-shadow: $x $y $blur $colour;
}

@mixin box-shadow ($string) {
  -webkit-box-shadow: $string;
  -moz-box-shadow:    $string;
  box-shadow:         $string;
}

@mixin columns($columnCount, $columnGap) {
    -moz-column-count: $columnCount;
    -moz-column-gap: $columnGap;
    -webkit-column-count: $columnCount;
    -webkit-column-gap: $columnGap;
    column-count: $columnCount;
    column-gap: $columnGap;
}

@mixin gradient($startColour, $endColour, $startPercent: 0%, $endPercent: 100%) {
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColour}', endColorstr='#{$endColour}', GradientType=0);
    /* Mozilla Firefox */ 
    background-image: -moz-linear-gradient(top, $startColour $startPercent, $endColour $endPercent);
    /* IE10 Consumer Preview */ 
    background-image: -ms-linear-gradient(top, $startColour $startPercent, $endColour $endPercent);
    /* Opera */ 
    background-image: -o-linear-gradient(top, $startColour $startPercent, $endColour $endPercent);
    /* Webkit (Safari/Chrome 10) */ 
    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(#{$startPercent / 100%}, $startColour), color-stop(#{$endPercent / 100%}, $endColour));
    /* Webkit (Chrome 11+) */ 
    background-image: -webkit-linear-gradient(top, $startColour $startPercent, $endColour $endPercent);
    /* W3C */
    background-image: linear-gradient(to bottom, $startColour $startPercent, $endColour $endPercent);
}

@mixin font-face($font-family, $font-path, $font-weight: normal, $font-style: normal, $font-stretch: normal) {
    @font-face {
        font-family: '#{$font-family}';
        src: url('#{$font-path}.eot');
        src: url('#{$font-path}.eot?#iefix') format('embedded-opentype'),
        url('#{$font-path}.woff') format('woff'),
        url('#{$font-path}.ttf') format('truetype'),
        url('#{$font-path}.svg##{$font-family}') format('svg');
        font-weight: $font-weight;
        font-style: $font-style;
        font-stretch: $font-stretch;
    }
}

@mixin opacity($opacity) {
    filter: alpha(opacity=$opacity * 100);
    opacity: $opacity;
}

@mixin animation($animation) {
    -moz-animation: $animation;
    -o-animation: $animation;
    -webkit-animation: $animation;
    animation: $animation;
}

@mixin transform($transform) {
    -moz-transform: $transform;
    -ms-transform: $transform;
    -o-transform: $transform;
    -webkit-transform: $transform;
    transform: $transform;
}

@mixin transition($transition) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
}

@mixin word-wrap() {
  word-break:     break-word;
  -webkit-hyphens: auto;
  -moz-hyphens:    auto;
  hyphens:         auto;
}

@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin cover() {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@mixin hyphens($hyphens: auto) {
	-moz-hyphens: $hyphens; /* Firefox 6+ */
	-webkit-hyphens: $hyphens; /* Safari 5.1+, IOS Safari 4.3+ */
	-ms-hyphens: $hyphens; /* IE 10+ */
	hyphens: $hyphens;
}

@mixin centre() {
  position: absolute;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}
